// Package {{ config.module_name() }}
// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
package {{ config.module_name() }}

{%- import "macros.got" as golang %}
/*
#cgo CFLAGS: -g
#cgo LDFLAGS: -L./lib -l{{ config.cdylib_name() }} -Wl,-rpath=./lib
#include "stdlib.h"
#include "{{ config.module_name() }}.h"
 */
import "C"
import "unsafe"
{%- for imported_class in self.imports() %}
import {{ imported_class }}
{%- endfor %}

{% include "RustBufferTemplate.got" %}

{% include "Helpers.got" %}

// Public interface members begin here.
{{ type_helper_code }}

{%- for func in ci.function_definitions() %}
{%- include "TopLevelFunctionTemplate.got" %}
{%- endfor %}

type CheckVersionResult int

const (
    CheckVersionResultOk CheckVersionResult = iota
    CheckVersionResultContractVersionMismatch
    CheckVersionResultApiChecksumMismatch
)

// Use a global variables to perform the versioning checks. Golang ensures that
// the code inside is only computed once.
var checkVersionResult = func() CheckVersionResult {
    // Get the bindings contract version from our ComponentInterface
    bindingsContractVersion := uint32({{ ci.uniffi_contract_version() }})
    // Get the scaffolding contract version by calling the into the dylib
    scaffoldingContractVersion := uint32(C.{{ ci.ffi_uniffi_contract_version().name() }}())
    if bindingsContractVersion != scaffoldingContractVersion {
        return CheckVersionResultContractVersionMismatch
    }

    {%- for (name, expected_checksum) in ci.iter_checksums() %}
    if uint16(C.{{ name }}()) != uint16({{ expected_checksum }}) {
        return CheckVersionResultApiChecksumMismatch
    }
    {%- endfor %}
    return CheckVersionResultOk
}()

func uniffiCheckFfiVersionMismatch() {
    switch checkVersionResult {
    case CheckVersionResultOk:
        break
    case CheckVersionResultContractVersionMismatch:
        panic("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case CheckVersionResultApiChecksumMismatch:
        panic("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
